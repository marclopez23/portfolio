---
// Button.astro
export interface Props {
  /** * Texto del botón
   */
  text?: string;
  
  /**
   * Tipo de elemento HTML
   */
  as?: 'button' | 'a';
  
  /**
   * Tipo de botón (solo para elementos button)
   */
  type?: 'button' | 'submit' | 'reset';
  
  /**
   * URL de destino (solo para elementos a)
   */
  href?: string;
  
  /**
   * Target del enlace (solo para elementos a)
   */
  target?: '_blank' | '_self' | '_parent' | '_top';
  
  /**
   * Rel del enlace (solo para elementos a)
   */
  rel?: string;
  
  /**
   * Si el botón está deshabilitado
   */
  disabled?: boolean;
  
  /**
   * Clases CSS adicionales
   */
  class?: string;
  
  /**
   * ID del elemento
   */
  id?: string;
  
  /**
   * Atributos ARIA adicionales
   */
  'aria-label'?: string;
  'aria-describedby'?: string;
  'aria-expanded'?: boolean;
  'aria-pressed'?: boolean;
}

const {
  text = 'Cónoceme',
  as = 'button',
  type = 'button',
  href,
  target,
  rel,
  disabled = false,
  class: className = '',
  id,
  ...ariaProps
} = Astro.props;

// Clases CSS del componente
const buttonClasses = [
  'button',
  className,
  disabled && 'button--disabled'
].filter(Boolean).join(' ');

// Props comunes para ambos elementos
const commonProps = {
  class: buttonClasses,
  id,
  ...ariaProps
};
---

{as === 'a' ? (
  <a
    {...commonProps}
    href={disabled ? undefined : href}
    target={target}
    rel={rel || (target === '_blank' ? 'noopener noreferrer' : undefined)}
    role="button"
    tabindex={disabled ? -1 : 0}
    aria-disabled={disabled}
  >
    {text}
    <slot />
  </a>
) : (
  <button
    {...commonProps}
    type={type}
    disabled={disabled}
  >
    {text}
    <slot />
  </button>
)}

<style>
  .button {
    /* Reset default styles */
    border: none;
    margin: 0;
    cursor: pointer;
    text-decoration: none;
    
    /* Layout */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
    
    /* Spacing - usando tokens CSS */
    padding: var(--spacing-lg) var(--spacing-2xl);
    gap: var(--spacing-lg);
    
    /* Appearance */
    background-color: var(--color-surface);
    border-radius: var(--radius-xxl);
    
    /* Typography */
    font-family: var(--font-family-primary);
    font-size: var(--font-size-button);
    font-weight: var(--font-weight-semibold);
    line-height: var(--line-height-normal);
    color: var(--color-text-primary);
    white-space: nowrap;
    
    /* Transitions */
    transition: all 0.2s ease-in-out;
    
    /* Focus */
    outline: none;
  }

  /* Elemento decorativo de fondo */
  .button::before {
    content: '';
    position: absolute;
    left: -89px;
    top: 50%;
    transform: translateY(-50%);
    width: 84px;
    height: 84px;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
    border-radius: 50%;
    transition: all 0.2s ease-in-out;
    opacity: 0.5;
    pointer-events: none;
  }

  /* Hover state */
  .button:hover:not(:disabled):not([aria-disabled="true"]) {
    background-color: var(--color-interactive-primary-hover);
    color: var(--color-interactive-primary-on-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .button:hover:not(:disabled):not([aria-disabled="true"])::before {
    left: -48px;
    width: 330px;
    height: 330px;
    opacity: 0.8;
    background: radial-gradient(circle, rgba(255,255,255,0.2) 0%, transparent 50%);
  }

  /* Active/Pressed state */
  .button:active:not(:disabled):not([aria-disabled="true"]) {
    transition: none;
    background-color: var(--color-text-tertiary);
    color: var(--color-text-primary);
    transform: translateY(0);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }

  .button:active:not(:disabled):not([aria-disabled="true"])::before {
    background: radial-gradient(circle, rgba(255,255,255,0.15) 0%, transparent 70%);
    opacity: 0.7;
  }

  /* Focus state for accessibility */
  .button:focus-visible {
    outline: 2px solid var(--color-text-tertiary);
    outline-offset: 2px;
  }

  /* Disabled state */
  .button:disabled,
  .button[aria-disabled="true"] {
    background-color: var(--color-interactive-primary-disabled);
    color: var(--color-interactive-primary-on-disabled);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    opacity: 0.6;
  }

  .button:disabled::before,
  .button[aria-disabled="true"]::before {
    opacity: 0.3;
  }

  /* Enlaces deshabilitados no deben ser clickeables */
  .button[aria-disabled="true"] {
    pointer-events: none;
  }
</style>

<script>
 // @ts-nocheck
 // Script para mejorar la accesibilidad y agregar efectos
 document.addEventListener('astro:page-load', () => {
   const buttons = document.querySelectorAll('.button');
   
   buttons.forEach(button => {
     // Efecto ripple al hacer clic
     const handleClick = (e) => {
       const target = e.currentTarget;
       
       // No hacer nada si está deshabilitado
       if (target.hasAttribute('disabled') || target.getAttribute('aria-disabled') === 'true') {
         return;
       }
       
       // Crear efecto ripple
       const ripple = document.createElement('span');
       const rect = target.getBoundingClientRect();
       const size = Math.max(rect.width, rect.height);
       const x = e.clientX - rect.left - size / 2;
       const y = e.clientY - rect.top - size / 2;
       
       ripple.style.cssText = `
         position: absolute;
         width: ${size}px;
         height: ${size}px;
         left: ${x}px;
         top: ${y}px;
         background: rgba(255, 255, 255, 0.3);
         border-radius: 50%;
         transform: scale(0);
         animation: ripple 0.6s linear;
         pointer-events: none;
         z-index: 1;
       `;
       
       target.appendChild(ripple);
       
       // Remover el ripple después de la animación
       setTimeout(() => {
         if (ripple.parentNode) {
           ripple.parentNode.removeChild(ripple);
         }
       }, 600);
     };

     // Mejorar accesibilidad para enlaces que actúan como botones
     const handleKeydown = (e) => {
       const target = e.currentTarget;
       
       if (target.tagName === 'A' && target.getAttribute('role') === 'button') {
         // Activar con Space o Enter para enlaces con role="button"
         if (e.key === ' ' || e.key === 'Enter') {
           e.preventDefault();
           target.click();
         }
       }
     };

     button.addEventListener('click', handleClick);
     button.addEventListener('keydown', handleKeydown);
   });

   // Agregar animación CSS si no existe
   if (!document.querySelector('#ripple-animation')) {
     const style = document.createElement('style');
     style.id = 'ripple-animation';
     style.textContent = `
       @keyframes ripple {
         to {
           transform: scale(4);
           opacity: 0;
         }
       }
     `;
     document.head.appendChild(style);
   }
 });
</script>